const { promisePool } = require('../config/database');

// ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const clearTestData = async (req, res) => {
    try {
        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏´‡∏ß‡∏¢
        const [ticketResult] = await promisePool.execute('DELETE FROM tbl_ticket');

        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
        const [resultResult] = await promisePool.execute('DELETE FROM tbl_result');

        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏Ç‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
        const [halfPriceResult] = await promisePool.execute('DELETE FROM tbl_half_price_numbers');

        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏á‡∏ß‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
        const [periodResult] = await promisePool.execute('DELETE FROM tbl_period WHERE status != "current"');

        res.json({
            success: true,
            message: '‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            data: {
                tickets_deleted: ticketResult.affectedRows,
                results_deleted: resultResult.affectedRows,
                half_price_deleted: halfPriceResult.affectedRows,
                periods_deleted: periodResult.affectedRows
            }
        });

    } catch (error) {
        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö'
        });
    }
};

// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const resetAllData = async (req, res) => {
    try {
        // ‡∏õ‡∏¥‡∏î foreign key checks ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        await promisePool.execute('SET FOREIGN_KEY_CHECKS = 0');

        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const [ticketResult] = await promisePool.execute('DELETE FROM tbl_ticket');

        const [resultResult] = await promisePool.execute('DELETE FROM tbl_result');

        const [halfPriceResult] = await promisePool.execute('DELETE FROM tbl_half_price_numbers');

        const [periodResult] = await promisePool.execute('DELETE FROM tbl_period');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbl_winners ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        let winnersResult = { affectedRows: 0 };
        try {
            [winnersResult] = await promisePool.execute('DELETE FROM tbl_winners');
        } catch (winnersError) {
            // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbl_winners ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        }

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AUTO_INCREMENT
        await promisePool.execute('ALTER TABLE tbl_ticket AUTO_INCREMENT = 1');
        await promisePool.execute('ALTER TABLE tbl_result AUTO_INCREMENT = 1');
        await promisePool.execute('ALTER TABLE tbl_half_price_numbers AUTO_INCREMENT = 1');
        await promisePool.execute('ALTER TABLE tbl_period AUTO_INCREMENT = 1');

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AUTO_INCREMENT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tbl_winners (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        try {
            await promisePool.execute('ALTER TABLE tbl_winners AUTO_INCREMENT = 1');
        } catch (winnersAutoIncError) {
            // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbl_winners ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        }

        // ‡πÄ‡∏õ‡∏¥‡∏î foreign key checks ‡∏Å‡∏•‡∏±‡∏ö
        await promisePool.execute('SET FOREIGN_KEY_CHECKS = 1');

        res.json({
            success: true,
            message: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            data: {
                tickets_deleted: ticketResult.affectedRows,
                results_deleted: resultResult.affectedRows,
                half_price_deleted: halfPriceResult.affectedRows,
                periods_deleted: periodResult.affectedRows,
                winners_deleted: winnersResult.affectedRows
            }
        });

    } catch (error) {
        // ‡πÄ‡∏õ‡∏¥‡∏î foreign key checks ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error
        try {
            await promisePool.execute('SET FOREIGN_KEY_CHECKS = 1');
        } catch (fkError) {
            // Ignore foreign key reset error
        }

        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
};

// ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const getDatabaseInfo = async (req, res) => {
    try {
        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const [ticketCount] = await promisePool.execute('SELECT COUNT(*) as count FROM tbl_ticket');
        const [resultCount] = await promisePool.execute('SELECT COUNT(*) as count FROM tbl_result');
        const [agentCount] = await promisePool.execute('SELECT COUNT(*) as count FROM tbl_agent WHERE agent_code != "ADMIN"');
        const [periodCount] = await promisePool.execute('SELECT COUNT(*) as count FROM tbl_period');
        const [halfPriceCount] = await promisePool.execute('SELECT COUNT(*) as count FROM tbl_half_price_numbers');
        
        // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const [recentTickets] = await promisePool.execute(`
            SELECT t.*, a.agent_name 
            FROM tbl_ticket t 
            JOIN tbl_agent a ON t.agent_id = a.agent_id 
            ORDER BY t.created_at DESC 
            LIMIT 10
        `);
        
        // ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô
        const [salesByAgent] = await promisePool.execute(`
            SELECT 
                a.agent_code,
                a.agent_name,
                COUNT(t.ticket_id) as total_tickets,
                SUM(t.price) as total_sales
            FROM tbl_agent a
            LEFT JOIN tbl_ticket t ON a.agent_id = t.agent_id
            WHERE a.agent_code != 'ADMIN'
            GROUP BY a.agent_id
            ORDER BY total_sales DESC
        `);
        
        res.json({
            success: true,
            data: {
                counts: {
                    tickets: ticketCount[0].count,
                    results: resultCount[0].count,
                    agents: agentCount[0].count,
                    periods: periodCount[0].count,
                    half_price_numbers: halfPriceCount[0].count
                },
                recent_tickets: recentTickets,
                sales_by_agent: salesByAgent
            }
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        });
    }
};

// Format Data - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const formatData = async (req, res) => {
    console.log('üîÑ Format Data API called');

    try {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
        console.log('üìù Testing database connection...');
        await promisePool.execute('SELECT 1 as test');
        console.log('‚úÖ Database connection OK');

        console.log('üìù Step 1: Disabling foreign key checks...');
        await promisePool.execute('SET FOREIGN_KEY_CHECKS = 0');
        console.log('‚úÖ Foreign key checks disabled');

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling
        let ticketResult = { affectedRows: 0 };
        let resultResult = { affectedRows: 0 };
        let halfPriceResult = { affectedRows: 0 };
        let periodResult = { affectedRows: 0 };

        try {
            console.log('üìù Step 2: Deleting tickets...');
            [ticketResult] = await promisePool.execute('DELETE FROM tbl_ticket');
            console.log(`‚úÖ Deleted ${ticketResult.affectedRows} tickets`);
        } catch (ticketError) {
            console.log('‚ö†Ô∏è Ticket table error:', ticketError.message);
        }

        try {
            console.log('üìù Step 3: Deleting results...');
            [resultResult] = await promisePool.execute('DELETE FROM tbl_result');
            console.log(`‚úÖ Deleted ${resultResult.affectedRows} results`);
        } catch (resultError) {
            console.log('‚ö†Ô∏è Result table error:', resultError.message);
        }

        try {
            console.log('üìù Step 4: Deleting half price numbers...');
            [halfPriceResult] = await promisePool.execute('DELETE FROM tbl_half_price_numbers');
            console.log(`‚úÖ Deleted ${halfPriceResult.affectedRows} half price numbers`);
        } catch (halfPriceError) {
            console.log('‚ö†Ô∏è Half price table error:', halfPriceError.message);
        }

        try {
            console.log('üìù Step 5: Deleting periods...');
            [periodResult] = await promisePool.execute('DELETE FROM tbl_period');
            console.log(`‚úÖ Deleted ${periodResult.affectedRows} periods`);
        } catch (periodError) {
            console.log('‚ö†Ô∏è Period table error:', periodError.message);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbl_winners ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        let winnersResult = { affectedRows: 0 };
        try {
            [winnersResult] = await promisePool.execute('DELETE FROM tbl_winners');
        } catch (winnersError) {
            // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbl_winners ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        }

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AUTO_INCREMENT
        await promisePool.execute('ALTER TABLE tbl_ticket AUTO_INCREMENT = 1');
        await promisePool.execute('ALTER TABLE tbl_result AUTO_INCREMENT = 1');
        await promisePool.execute('ALTER TABLE tbl_half_price_numbers AUTO_INCREMENT = 1');
        await promisePool.execute('ALTER TABLE tbl_period AUTO_INCREMENT = 1');

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AUTO_INCREMENT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tbl_winners (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        try {
            await promisePool.execute('ALTER TABLE tbl_winners AUTO_INCREMENT = 1');
        } catch (winnersAutoIncError) {
            // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbl_winners ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        }

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏¥‡∏î (‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbl_settings ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
        try {
            await promisePool.execute('UPDATE tbl_settings SET setting_value = "0" WHERE setting_key = "system_status"');
        } catch (settingsError) {
            // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á tbl_settings ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ system_status
        }

        // ‡πÄ‡∏õ‡∏¥‡∏î foreign key checks ‡∏Å‡∏•‡∏±‡∏ö
        await promisePool.execute('SET FOREIGN_KEY_CHECKS = 1');

        res.json({
            success: true,
            message: 'Format Data ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô 0',
            data: {
                tickets_deleted: ticketResult.affectedRows,
                results_deleted: resultResult.affectedRows,
                half_price_deleted: halfPriceResult.affectedRows,
                periods_deleted: periodResult.affectedRows,
                winners_deleted: winnersResult.affectedRows,
                system_status: '‡∏õ‡∏¥‡∏î'
            }
        });

    } catch (error) {
        console.error('‚ùå Format Data Error:', error);

        // ‡πÄ‡∏õ‡∏¥‡∏î foreign key checks ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error
        try {
            await promisePool.execute('SET FOREIGN_KEY_CHECKS = 1');
        } catch (fkError) {
            console.error('‚ùå FK Reset Error:', fkError);
        }

        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Format Data',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
};

module.exports = {
    clearTestData,
    resetAllData,
    getDatabaseInfo,
    formatData
};
