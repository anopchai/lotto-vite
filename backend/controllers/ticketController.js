const Ticket = require('../models/Ticket');
const { SystemConfig } = require('../models/Setting');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏´‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
const createTickets = async (req, res) => {
    try {
        // console.log('=== CREATE TICKETS REQUEST ===');
        // console.log('User:', req.user);
        // console.log('Body:', JSON.stringify(req.body, null, 2));
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô
        const isSystemOpen = await SystemConfig.getSystemStatus();
        if (!isSystemOpen) {
            return res.status(403).json({
                success: false,
                message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡∏á‡∏´‡∏ß‡∏¢‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
            });
        }
        
        const { buyer_name, seller_name, tickets, period_id } = req.body;
        const agent_id = req.user.agent_id;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!buyer_name || !tickets || !Array.isArray(tickets) || tickets.length === 0) {
            return res.status(400).json({
                success: false,
                message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
            });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß)
        if (buyer_name.trim().length === 0) {
            return res.status(400).json({
                success: false,
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠'
            });
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡πã‡∏ß
        for (const ticket of tickets) {
            let { lotto_number, lotto_type, price, price_toad } = ticket;

            // ‡πÅ‡∏õ‡∏•‡∏á price ‡πÅ‡∏•‡∏∞ price_toad ‡πÄ‡∏õ‡πá‡∏ô number
            price = parseFloat(price) || 0;
            price_toad = parseFloat(price_toad) || 0;

            if (!lotto_number || !lotto_type || price <= 0) {
                return res.status(400).json({
                    success: false,
                    message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
                });
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ß‡∏¢
            const validTypes = ['2up', '2down', '3up', '3toad', '3straight_toad', 'runup', 'rundown'];
            if (!validTypes.includes(lotto_type)) {
                return res.status(400).json({
                    success: false,
                    message: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
                });
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢
            if (lotto_type === '2up' || lotto_type === '2down') {
                if (!/^\d{2}$/.test(lotto_number)) {
                    return res.status(400).json({
                        success: false,
                        message: '‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å'
                    });
                }
            } else if (lotto_type === '3up' || lotto_type === '3toad' || lotto_type === '3straight_toad') {
                if (!/^\d{3}$/.test(lotto_number)) {
                    return res.status(400).json({
                        success: false,
                        message: '‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏•‡∏±‡∏Å'
                    });
                }
            } else if (lotto_type === 'runup' || lotto_type === 'rundown') {
                if (!/^\d{1}$/.test(lotto_number)) {
                    return res.status(400).json({
                        success: false,
                        message: '‡πÄ‡∏•‡∏Ç‡∏ß‡∏¥‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1 ‡∏´‡∏•‡∏±‡∏Å'
                    });
                }
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
            if (!Number.isInteger(price) || price <= 0) {
                return res.status(400).json({
                    success: false,
                    message: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ö‡∏ß‡∏Å'
                });
            }
        }

        // ‡πÅ‡∏õ‡∏•‡∏á price ‡πÅ‡∏•‡∏∞ price_toad ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å ticket
        const processedTickets = tickets.map(ticket => ({
            ...ticket,
            price: parseFloat(ticket.price) || 0,
            price_toad: parseFloat(ticket.price_toad) || 0
        }));

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏±‡πã‡∏ß
        const result = await Ticket.createTickets({
            agent_id,
            buyer_name,
            seller_name,
            tickets: processedTickets,
            period_id
        });
        
        res.status(201).json({
            success: true,
            message: result.message,
            data: result
        });
        
    } catch (error) {
        console.error('=== CREATE TICKETS ERROR ===');
        console.error('Error message:', error.message);
        console.error('Error stack:', error.stack);
        console.error('Error code:', error.code);
        console.error('Error sql:', error.sql);
        console.error('================================');

        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏ß‡∏¢: ' + error.message
        });
    }
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô
const getMyTickets = async (req, res) => {
    try {
        const agentId = req.user.agent_id;
        const limit = parseInt(req.query.limit) || 100;
        const offset = parseInt(req.query.offset) || 0;
        
        const tickets = await Ticket.getTicketsByAgent(agentId, limit, offset);
        
        res.json({
            success: true,
            data: tickets,
            pagination: {
                limit,
                offset,
                total: tickets.length
            }
        });
        
    } catch (error) {
        console.error('Get my tickets error:', error);
        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß'
        });
    }
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const getAllTickets = async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 100;
        const offset = parseInt(req.query.offset) || 0;
        
        const tickets = await Ticket.getAllTickets(limit, offset);
        
        res.json({
            success: true,
            data: tickets,
            pagination: {
                limit,
                offset,
                total: tickets.length
            }
        });
        
    } catch (error) {
        console.error('Get all tickets error:', error);
        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß'
        });
    }
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ï‡∏≤‡∏° bill_id
const getTicketsByBillId = async (req, res) => {
    try {
        const { billId } = req.params;
        const agentId = req.user.agent_code === 'ADMIN' ? null : req.user.agent_id;

        const tickets = await Ticket.getTicketsByBillId(billId, agentId);

        if (tickets.length === 0) {
            return res.status(404).json({
                success: false,
                message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
            });
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        let totalAmount = 0;
        tickets.forEach(ticket => {
            totalAmount += ticket.price;
            if (ticket.price_toad) {
                totalAmount += ticket.price_toad;
            }
        });

        res.json({
            success: true,
            data: {
                bill_id: billId,
                buyer_name: tickets[0].buyer_name,
                seller_name: tickets[0].seller_name,
                agent_id: tickets[0].agent_id,
                period_id: tickets[0].period_id,
                period: tickets[0].period_name,
                created_at: tickets[0].created_at,
                tickets: tickets,
                total_amount: totalAmount,
                ticket_count: tickets.length
            }
        });

    } catch (error) {
        console.error('Get tickets by bill ID error:', error);
        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•'
        });
    }
};

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const getAllBills = async (req, res) => {
    try {
        const { start_date, end_date, period_id } = req.query;
        const agentId = req.user.agent_code === 'ADMIN' ? null : req.user.agent_id;

        // console.log('=== GET ALL BILLS REQUEST ===');
        // console.log('User:', req.user.agent_name, '(' + req.user.agent_code + ')');
        // console.log('Agent ID:', agentId);
        // console.log('Query params:', { start_date, end_date, period_id });

        const bills = await Ticket.getAllBills(agentId, start_date, end_date, period_id);

        // console.log('üìã Bills found:', bills.length);
        // console.log('üìä Bills data:', bills);

        res.json({
            success: true,
            data: bills
        });

    } catch (error) {
        console.error('Get all bills error:', error);
        res.status(500).json({
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•'
        });
    }
};

// ‡∏•‡∏ö‡∏ö‡∏¥‡∏•
const deleteBill = async (req, res) => {
    try {
        const { billId } = req.params;
        const agentId = req.user.agent_code === 'ADMIN' ? null : req.user.agent_id;
        
        const result = await Ticket.deleteBill(billId, agentId);
        
        res.json({
            success: true,
            message: result.message,
            data: {
                deleted_tickets: result.deleted_tickets
            }
        });
        
    } catch (error) {
        console.error('Delete bill error:', error);
        res.status(500).json({
            success: false,
            message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏¥‡∏•'
        });
    }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•
const updateBill = async (req, res) => {
    try {
        const { billId } = req.params;
        const { buyer_name, tickets, total_amount } = req.body;
        const agentId = req.user.agent_code === 'ADMIN' ? null : req.user.agent_id;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!buyer_name || !buyer_name.trim()) {
            return res.status(400).json({
                success: false,
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠'
            });
        }
        
        if (!tickets || tickets.length === 0) {
            return res.status(400).json({
                success: false,
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ß‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
            });
        }
        
        const result = await Ticket.updateBill(billId, {
            buyer_name: buyer_name.trim(),
            tickets,
            total_amount
        }, agentId);
        
        res.json({
            success: true,
            message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            data: result
        });
        
    } catch (error) {
        console.error('Update bill error:', error);
        res.status(500).json({
            success: false,
            message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•'
        });
    }
};

module.exports = {
    createTickets,
    getMyTickets,
    getAllTickets,
    getTicketsByBillId,
    getAllBills,
    deleteBill,
    updateBill
};
